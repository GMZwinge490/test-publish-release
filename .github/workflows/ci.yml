name: Test npm lint, test, publish, release
on: push
env:
  NODE_VERSION: 18
jobs:

  calculate_version:
    name: Calculate version
    runs-on: ubuntu-latest
    #steps:
    #  # From https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs#example-defining-outputs-for-a-job
    #  - id: step1
    #    run: echo "version=1.0.3" >> "$GITHUB_OUTPUT"
    #outputs:
    #  version: ${{ steps.step1.outputs.version }}
    #  release: v${{ steps.step1.outputs.version }}
    # Trying https://github.com/GitTools/GitVersion
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install GitVersion
        # Problem: this doesn't seem to work if the branch is reused without being rebased.
        # Adding the GetVersion.yml from https://github.com/OctopusDeploy/Octopus-Bamboo/blob/main/GitVersion.yml
        # seems to have fixed the problem.
        #uses: gittools/actions/gitversion/setup@v0
        # But now, the main label is like this: 1.0.6-ci.7 instead of 1.0.6.
        # Let's try the same action as in 
        # https://github.com/OctopusDeploy/Octopus-Bamboo/blob/fc3fbea0aadeacb57fb03198db8d7af72de8eedd/.github/workflows/build.yml#L50
        uses: gittools/actions/gitversion/setup@v0.9.13
        with:
          versionSpec: '5.12.0'
      - id: gitversion
        name: Determine Version
        #uses: gittools/actions/gitversion/execute@v0
        uses: gittools/actions/gitversion/execute@v0.9.13
      - name: Display GitVersion outputs (step output)
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      release: v${{ steps.gitversion.outputs.semVer }}

  lint:
    name: Run lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Setup Node.js ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
          registry-url: https://npm.pkg.github.com/
      - run: npm ci
      - run: npm run lint

  run-tests:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Setup Node.js ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
          registry-url: https://npm.pkg.github.com/
      - run: npm ci
      - run: npm run build
      - run: npm run test
      - run: npm run test:coverage

  build-package:
    name: Build and publish
    needs: [calculate_version, lint, run-tests]
    runs-on: ubuntu-latest
    permissions:
      # To be able to "read" release
      #contents: read
      # To be able to create release
      contents: write
      # To be able to download package
      #packages: read
      # To be able to publish package
      packages: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Setup Node.js ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
          registry-url: https://npm.pkg.github.com/
      - run: npm --no-git-tag-version version ${{ needs.calculate_version.outputs.version }}
      - run: npm ci
      - run: npm run build
      - run: npm publish
        # This publishes package in
        #    https://github.com/GMZwinge490/test-publish-release/pkgs/npm/test-publish-release/versions
        # where they can be deleted.
        # This doesn't seem to work in https://github.com/Rockwell-Automation-FTDS/dependabot-test/edit/main/.github/workflows/ci.yaml.
        # If `packages:` above is set to `read`, GITHUB_TOKEN gives this error:
        #    npm ERR! 403 403 Forbidden - PUT https://npm.pkg.github.com/@rockwell-automation-ftds%2fdependabot-test
        #      - Permission installation not allowed to Write organization package
        # If `packages:` above is set to `read`, GITHUB_TOKEN gives this error:
        #    npm ERR! 403 403 Forbidden - PUT https://npm.pkg.github.com/@rockwell-automation-ftds%2fdependabot-test
        #      - Permission permission_denied: write_package
        # The root of the problem may have been that for some reason, under the Package settings, section "Manage Action access",
        # the list was empty. Clicked "Add Repository", add the repository was failing to publish, changed its role from Read to Write.
        # In my personal packages, all the package settings lists the repo that publishes the package with the Role "Admin".
        # Under the org, some package setting show no repo, some do, those that show a repo some with Role Admin, some with Role Read.
        # Could those setting depend on the token used for publishing the first package?
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: softprops/action-gh-release@v1
        # GitVersion main need branch tag.
        #if: github.ref_name == 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ needs.calculate_version.outputs.release }}
          tag_name: ${{ needs.calculate_version.outputs.version }}
